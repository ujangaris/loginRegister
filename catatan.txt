1. masuk kericetory backand, lalu 'npm init -y'
2. install dependencies yang dibutuhkan :
    npm install express mysql2 sequelize jsonwebtoken dotenv bcrypt cookie-parser cors
3.setup server dan install nodemon secara global
    npm install -g nodemon
    
    jalankan server dengan perintah:
        nodemon index(nama index karna kita menamai servernya dengan index, kalau server kita bisa ketiakan 'nodemon server')
4. install extention restclient pada vscode agar dpt melakukan pengujian dengan file reequest.rest
    lakukan pengujian dengan Send Request endpoint yang kita buat pada file reequest.res:
        GET http://localhost:5000/users
     jika hasil output adalah array kosong [] maka api yang kita buat success. 
5. Create data
    pengujian menggunakan file  request.rest
        kali ini buat baris code POST :
        ### <- ini digunakan untuk memisahkan antar request
        POST http://localhost:5000/users
        Content-Type: application/json

        {
            "name": "Ujang Arisandi",
            "email": "ujangaja@gmail.com",
            "password": "123456",
            "confPassword": "123456"
        }

        jika berhasil akan ada outut response:
        {
            "msg": "Register Berhasil"
        }

        untuk lebih memastikan ,send request data get all users:
        
            GET http://localhost:5000/users

            maka output response akan menampilkan data yang td kita create:

            [
                {
                    "id": 1,
                    "name": "Ujang Arisandi",
                    "email": "ujangaja@gmail.com",
                    "password": "$2b$10$uLMrPLx57g20dur2KSS2MeJOD51bm31EWMozzF5OBaltiHXY380ya",
                    "refresh_token": null,
                    "createdAt": "2021-11-05T11:18:35.000Z",
                    "updatedAt": "2021-11-05T11:18:35.000Z"
                }
            ]

            jika kita coba create data kembali namun password dan confPassword tidak sama , 
            maka output akan menampilkan message berikut:

                {
                    "msg": "Password dan Confirm Password tidak cocok"
                }

            dan itu artinya function Register kita berjalan dengan baik.


5. Login 
    pengujian menggunakan file  request.rest
        buat lagi baris code POST :
        ### <- ini digunakan untuk memisahkan antar request
        POST http://localhost:5000/login
        Content-Type: application/json

        {
            "email": "ujangaja@gmail.com",
            "password": "123456"
        }

        maka output response akan menampilkan:

            {
                "accessToken": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOjEsIm5hbWUiOiJVamFuZyBBcmlzYW5kaSIsImVtYWlsIjoidWphbmdhamFAZ21haWwuY29tIiwiaWF0IjoxNjM2MTE2MTYyLCJleHAiOjE2MzYxMTYxODJ9.0FT7CzUkd10pMV7S0FFtWMdRg14zywLF_LCgRQw8GCw"
            }
        
        jika kita uji dengan password yang salah, maka akan tampil:

        {
            "msg": "Wrong Password"
        }

6. Middleware
    
    pengujian dengan postman:
        login terlebih dahulu, lalu ambil token(token ini punya durasi waktu 15detik)
        pada get user tambahkan Authorization dan Bearer lalu sepasi lalu token, seperti dibawah ini:

        GET http://localhost:5000/users
        Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOjEsIm5hbWUiOiJVamFuZyBBcmlzYW5kaSIsImVtYWlsIjoidWphbmdhamFAZ21haWwuY29tIiwiaWF0IjoxNjM2MTE4OTIyLCJleHAiOjE2MzYxMTg5NDJ9.iGMk1cdzLgNPqLR8hQ4YFZYpkifRD3UOMqRRZsIt1V8

        jika success maka akan menampilkan user yang login, jika gagal mungkin karna durasi waktu yang habis atau memang gagal.

    Membuat agar password dan request tokennya tidak tanpil, lakukan pengujian dengan postman
        login terlebih dahulu, lalu ambil token(token ini punya durasi waktu 15detik)
        pada get user tambahkan Authorization dan Bearer lalu sepasi lalu token, seperti dibawah ini:

        GET http://localhost:5000/users
        Authorization: Bearer <token>

        jika success maka akan menampilkan user yang login, namun kali ini hasil output dari respone hanya akan menampilkan id,name, dan email.

        [
            {
                "id": 1,
                "name": "Ujang Arisandi",
                "email": "ujangaja@gmail.com"
            }
        ]

7. Refresh Token
    pengujian dengan postman:
        login dan tunggu sampai masa life time tokennya habis(15detik)
        GET http://localhost:5000/users
            Authorization: Bearer <token>
        
        kemudian send request pada http request token:

        ###
        GET http://localhost:5000/token

        selanjutnya akan keluar tokennya, lalu copas get all user

        GET http://localhost:5000/users
            Authorization: Bearer <token>

        jika output response menampilkan seperti dibawah:

        [
            {
                "id": 1,
                "name": "Ujang Arisandi",
                "email": "ujangaja@gmail.com"
            }
        ]

        maka refresh token yang kita buat berhasil.

8. Logout
    Pengujian dengan request.rest:
        lakukan login, kemudian coba access refres token jika masih mendapatkan token baru, 
        disini akan normal, 
        nah sekarang coba kita lakukan logout:

            ###
            DELETE http://localhost:5000/logout
        
        kemudian setelah logout, coba kembali acces refresh token,
        akan tampil output:
            "Unauthorized"
        
        ini menandakan Logout yang kita buat berhasil.

9. Cors (agar API yang kita buat dapat digunakan dari luar domain)
    
    sampai sini Backend yang kita buat sudah selesai, lanjut ke FrontEnd.

10. FrontEnd    
    install reactJs:
        npx create-react-app frontend
12. installasi yang dibutuhkan untuk react
        npm install react-router-dom axios bulma jwt-decode

        untuk memastikan apliaksi react kita berjalan dengan baik, jalankan npm start
13. setup react sesuai kebutuhan



        

        